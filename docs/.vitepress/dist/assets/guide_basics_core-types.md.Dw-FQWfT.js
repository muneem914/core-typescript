import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"Core Types","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/basics/core-types.md","filePath":"guide/basics/core-types.md"}'),n={name:"guide/basics/core-types.md"};function l(h,s,p,k,o,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="core-types" tabindex="-1">Core Types <a class="header-anchor" href="#core-types" aria-label="Permalink to &quot;Core Types&quot;">​</a></h1><p>TypeScript&#39;s core types are like labels for your data. They tell the computer what kind of information you&#39;re working with, like &quot;text,&quot; &quot;numbers,&quot; or &quot;true/false.&quot; This helps catch mistakes early and makes your code more reliable. Think of them as basic building blocks: <code>strings</code> for words, <code>numbers</code> for math, <code>booleans</code> for yes/no, and so on. TypeScript also lets you create more complex structures like lists (<code>arrays</code>) and fixed-length lists (<code>tuples</code>). Using these types helps make your code safer and easier to understand.</p><p>Let&#39;s dive deep into TypeScript core types with detailed analogies, examples, and outputs so you can understand everything in one go!</p><h2 id="primitive-types" tabindex="-1">Primitive Types <a class="header-anchor" href="#primitive-types" aria-label="Permalink to &quot;Primitive Types&quot;">​</a></h2><p>Primitive types are the most basic data types, like the foundation of a building.</p><h3 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h3><p>A string is used to represent text. It stores sequences of characters, like letters, numbers and symbols which enclosed with single or double quotation marks (depending on the programming language).</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: Alice</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p>A string is like a label on a jar. You can read and change the text, but it’s always a series of characters. For example, a jar labeled &quot;Sugar&quot; can be relabeled as &quot;Salt.&quot;</p></div><h3 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number&quot;">​</a></h3><p>A number represents any numerical value, whether an integer or a decimal (floats). Can be positive or negative.<br> Example: <code>age = 15</code> (integer), <code>pi = 3.14</code> (float), <code>loan = -1000</code> (negative integer).</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: 25</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p>A number is like the speedometer in a car. It shows a numerical value, and you can’t accidentally replace it with words.</p></div><h3 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean&quot;">​</a></h3><p>A boolean represents &quot;true&quot; or &quot;false&quot; values. It can hold only two values, which represents logical states in programming. It is used for conditions and decision making.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isLoggedIn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isLoggedIn); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: true</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p>A boolean is like a door — it’s either open (true) or closed (false). There’s no in-between.</p></div><h2 id="arrays-tuples-and-objects" tabindex="-1">Arrays, Tuples and Objects <a class="header-anchor" href="#arrays-tuples-and-objects" aria-label="Permalink to &quot;Arrays, Tuples and Objects&quot;">​</a></h2><h3 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-label="Permalink to &quot;Arrays&quot;">​</a></h3><p>An array is a linear data structure that stores a collection of elements of the same type.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fruits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Apple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Banana&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mango&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fruits); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: [&quot;Apple&quot;, &quot;Banana&quot;, &quot;Mango&quot;]</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p>An array is like an fruit carton that holds multiple fruits — they’re all the same type (fruits), just like elements in an array are the same type. No vegetables are allowed in the fruit cartoon.</p></div><h3 id="tuples" tabindex="-1">Tuples <a class="header-anchor" href="#tuples" aria-label="Permalink to &quot;Tuples&quot;">​</a></h3><p>A tuple is like an array, but with a fixed length and specific types for each position. Tuple is immutable, which means you cannot change any data once created.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: [&quot;Alice&quot;, 25]</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p>A tuple is like a boarding pass. It has a fixed set of fields like passenger name and seat number. You can’t accidentally swap the name with the seat number.</p></div><h3 id="objects" tabindex="-1">Objects <a class="header-anchor" href="#objects" aria-label="Permalink to &quot;Objects&quot;">​</a></h3><p>An object is a collection of key-value pairs. It is more complex data structure with potentially different data types for each key, which allows structured data representation.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: { name: &quot;Alice&quot;, age: 25 }</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p>An object is like a toolbox — each tool (key) has a specific purpose (value).</p></div><h3 id="key-differences-between-array-tuple-and-object-data-types" tabindex="-1">Key differences between <code>array</code>, <code>tuple</code>, and <code>object</code> data types <a class="header-anchor" href="#key-differences-between-array-tuple-and-object-data-types" aria-label="Permalink to &quot;Key differences between \`array\`, \`tuple\`, and \`object\` data types&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Feature</th><th>Array</th><th>Tuple</th><th>Object</th></tr></thead><tbody><tr><td><strong>Mutability</strong></td><td>Mutable – elements can be changed after creation.</td><td>Immutable – elements cannot be modified after creation.</td><td>Typically mutable – individual key-value pairs can be modified.</td></tr><tr><td><strong>Data Type Homogeneity</strong></td><td>Usually requires all elements to be of the same data type.</td><td>Can store elements of different data types.</td><td>Each key-value pair can have a different data type.</td></tr><tr><td><strong>Access</strong></td><td>Elements accessed using an index (numerical position).</td><td>Elements accessed using an index (numerical position).</td><td>Elements accessed using their associated key.</td></tr><tr><td><strong>Use Cases</strong></td><td>Storing a collection of similar data that might need frequent updates.</td><td>Storing a fixed set of data that should not be altered.</td><td>Representing complex data with different related attributes, like user information or product details.</td></tr></tbody></table><h2 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-label="Permalink to &quot;Enums&quot;">​</a></h2><p>Enums let you define a set of named constants. It can make easier to intent a document, or create a set of distinct cases. TypeScript provides both numeric and string-based enums.</p><h3 id="numeric-enums" tabindex="-1">Numeric enums <a class="header-anchor" href="#numeric-enums" aria-label="Permalink to &quot;Numeric enums&quot;">​</a></h3><p>An enum can be defined using the <code>enum</code> keyword.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Up</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> move</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Direction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Direction.Up;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(move); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: 0</span></span></code></pre></div><p>Above, we have a numeric <code>enum</code> where <code>Up</code> would have the value <code>0</code>. <code>Down</code> would have <code>1</code> etc. By default, numeric enum indexes starts with 0 and goes-on by auto-incrementing behavior.<br> But we can initialize according to our preferences. For example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Up</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Above, we have a numeric enums where <code>Up</code> is initialized with <code>1</code>. All of the following members are auto-incremented from that point on. In other words, <code>Direction.Up</code> has the value <code>1</code>, <code>Down</code> has <code>2</code>, <code>Left</code> has <code>3</code>, <code>Right</code> has <code>4</code></p><h3 id="string-enums" tabindex="-1">String enums <a class="header-anchor" href="#string-enums" aria-label="Permalink to &quot;String enums&quot;">​</a></h3><p>In a string enum, each member has to be constant-initialized with a string literal, or with another string enum member.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Up</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UP&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Down</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;DOWN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Left</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;LEFT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Right</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;RIGHT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>String enums allow you to give a meaningful and readable value when your code runs, independent of the name of the enum member itself.</p><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p>An enum is like traffic signals. You only have a few fixed options (red, yellow, green). You can’t accidentally invent a new signal.</p></div><h2 id="special-types" tabindex="-1">Special Types <a class="header-anchor" href="#special-types" aria-label="Permalink to &quot;Special Types&quot;">​</a></h2><h3 id="any" tabindex="-1">Any <a class="header-anchor" href="#any" aria-label="Permalink to &quot;Any&quot;">​</a></h3><p>The <code>any</code> type can hold any value. Like anything; it can hold string, number, boolean, even an array. It is relevant to JavaScript variable.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> anything</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">anything </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(anything); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: 42</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p><code>any</code> is like a backpack. You can put anything inside, but it might get messy if you’re not careful.</p></div><h3 id="unknown" tabindex="-1">Unknown <a class="header-anchor" href="#unknown" aria-label="Permalink to &quot;Unknown&quot;">​</a></h3><p><code>unknown</code> is safer than <code>any</code>. All you need to do is, you must check the type before using it.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> notSure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Maybe a string?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> notSure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(notSure.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: MAYBE A STRING?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p><code>unknown</code> is like a sealed package. You need to open it carefully to see what’s inside before using it.</p></div><h3 id="void" tabindex="-1">Void <a class="header-anchor" href="#void" aria-label="Permalink to &quot;Void&quot;">​</a></h3><p><code>void</code> represents the absence of a value. Usually in functions that don&#39;t return anything.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Ta-da! You will see nothing.</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p><code>void</code> is like shouting into a canyon. You send a message (call the function), but you don’t expect anything back.</p></div><h3 id="never" tabindex="-1">Never <a class="header-anchor" href="#never" aria-label="Permalink to &quot;Never&quot;">​</a></h3><p><code>never</code> represents values that never happen.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> throwError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> never</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Something went wrong!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p><code>never</code> is like a trapdoor. Once you step on it (call the function), you’re gone, and nothing comes back.</p></div><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>Understanding TypeScript’s core types makes your code more reliable and easier to maintain. Remember:</p><ul><li><strong>Primitive Types</strong>: Basic values like text, numbers, and true/false.</li><li><strong>Arrays and Tuples</strong>: Collections of values.</li><li><strong>Enums</strong>: Fixed sets of named constants.</li><li><strong>Special Types</strong>: Flexible or constrained types for advanced scenarios.</li></ul>`,65)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
