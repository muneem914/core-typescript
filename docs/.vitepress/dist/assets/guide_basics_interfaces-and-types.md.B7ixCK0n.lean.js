import{_ as l,C as h,c as p,o as k,ag as a,G as e,a as t,j as n}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"Interfaces and Types","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/basics/interfaces-and-types.md","filePath":"guide/basics/interfaces-and-types.md"}'),r={name:"guide/basics/interfaces-and-types.md"};function d(o,s,c,E,g,y){const i=h("Badge");return k(),p("div",null,[s[0]||(s[0]=a("",16)),e(i,{type:"danger",text:"Note"}),s[1]||(s[1]=a("",10)),e(i,{type:"danger",text:"Note"}),s[2]||(s[2]=a("",9)),e(i,{type:"danger",text:"Note"}),s[3]||(s[3]=t(" Merging only works with ")),s[4]||(s[4]=n("code",null,"Interface",-1)),s[5]||(s[5]=n("h2",{id:"types",tabindex:"-1"},[t("Types "),n("a",{class:"header-anchor",href:"#types","aria-label":'Permalink to "Types"'},"â€‹")],-1)),s[6]||(s[6]=n("p",null,[t("Both "),n("code",null,"type"),t(" and "),n("code",null,"interface"),t(" can define an object's structure. But types are more flexible and can define not only object shapes but also unions, intersections, primitives, and more. (we will see these types in Intermediate Typescript)")],-1)),e(i,{type:"warning",text:"N.B."}),s[7]||(s[7]=a("",14)),e(i,{type:"danger",text:"Note"}),s[8]||(s[8]=a("",20)),e(i,{type:"danger",text:"Note"}),s[9]||(s[9]=a("",24))])}const m=l(r,[["render",d]]);export{u as __pageData,m as default};
