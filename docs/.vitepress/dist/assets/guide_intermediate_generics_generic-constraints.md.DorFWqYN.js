import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"Generic Constraints","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/intermediate/generics/generic-constraints.md","filePath":"guide/intermediate/generics/generic-constraints.md"}'),n={name:"guide/intermediate/generics/generic-constraints.md"};function h(l,s,o,r,p,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="generic-constraints" tabindex="-1">Generic Constraints <a class="header-anchor" href="#generic-constraints" aria-label="Permalink to &quot;Generic Constraints&quot;">​</a></h1><p>Generics offer flexibility, letting code work with various types. However, sometimes you need rules. Generic constraints are those rules. They limit the types a generic can accept, ensuring they have the properties or methods you need. Think of it as saying, &quot;This function works with any type, as long as it has a &#39;length&#39; property,&quot; or &quot;This class only works with types that follow this specific interface.&quot; This keeps your code safe and predictable, preventing errors by ensuring only compatible types are used.</p><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p>Think of a vending machine that sells drinks. Generics are like the machine&#39;s ability to accept various types of drink orders. Generic constraints are the rules the machine follows. It might have a rule like, &quot;Only accepts orders for drinks that fit in the dispensing slot,&quot; or &quot;Only accepts orders for drinks that are in our inventory.&quot; These rules ensure the machine doesn&#39;t jam or try to dispense something it doesn&#39;t have. The vending machine is flexible, but it has limitations to guarantee it functions correctly.</p></div><p><strong>Problem Without Constraints</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error: Not all types have &#39;length&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error! Number doesn&#39;t have &#39;length&#39;</span></span></code></pre></div><p><code>number</code> does not have a <code>.length</code> property, so the code fails. But we can fix this using <strong>Generic Constraints</strong>.</p><p>Below some examples of <em>generic constraints</em> are discussed.</p><h2 id="constraint-with-length-property" tabindex="-1">Constraint with <code>length</code> Property <a class="header-anchor" href="#constraint-with-length-property" aria-label="Permalink to &quot;Constraint with \`length\` Property&quot;">​</a></h2><p>This constraint ensures that a generic function or type can only be used with data types that possess a <code>length</code> property. This is particularly useful when you need to perform operations that rely on the concept of &quot;length,&quot; such as determining the size of a string, array, or other iterable object.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: 5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// logLength(42);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Error: number has no &#39;length&#39;</span></span></code></pre></div><h3 id="how-it-works" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it works&quot;">​</a></h3><ul><li><code>function logLength&lt;T extends { length: number }&gt;(arg: T): void</code>: <ul><li>Defines a generic function <code>logLength</code> with type <code>T</code>.</li><li><code>T extends { length: number }</code>: Ensures <code>T</code> has a <code>length</code> property (number).</li><li><code>console.log(arg.length);</code>: Logs the <code>length</code>.</li></ul></li><li><code>logLength(&quot;hello&quot;);</code>: String has <code>length</code>.</li><li><code>logLength([1, 2, 3]);</code>: Array has <code>length</code>.</li><li><code>logLength(42);</code>: Number lacks <code>length</code> (error).</li></ul><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p>Imagine you have a machine that prints labels. This machine has a constraint: it can only print labels on things that have a &quot;surface area&quot; (like a <code>length</code> property). You can print labels on boxes, envelopes, or rolls of tape because they all have a surface area. But you cannot print a label on a cloud or a sound, because they don&#39;t. The machine&#39;s constraint ensures it only works with compatible items.</p></div><h2 id="constraint-with-interface" tabindex="-1">Constraint with Interface <a class="header-anchor" href="#constraint-with-interface" aria-label="Permalink to &quot;Constraint with Interface&quot;">​</a></h2><p>This constraint ensures that a generic function or type can only be used with objects that implement a specific interface. Interfaces define a contract, specifying the properties and methods that an object must have. This constraint is crucial for ensuring that objects passed to a function have the required structure.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HasId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HasId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`ID: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: ID: 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// printId({ name: &quot;Bob&quot; });</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Error: Missing &#39;id&#39;</span></span></code></pre></div><h3 id="how-it-works-1" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works-1" aria-label="Permalink to &quot;How it works&quot;">​</a></h3><ul><li><code>interface HasId { id: number; }</code>: Defines interface <code>HasId</code> with <code>id: number</code>.</li><li><code>function printId&lt;T extends HasId&gt;(item: T): void</code>: <ul><li>Generic function <code>printId</code> with type <code>T</code>.</li><li><code>T extends HasId</code>: Ensures <code>T</code> implements <code>HasId</code>.</li></ul></li><li><code>printId({ id: 1, name: &quot;Alice&quot; });</code>: Object implements <code>HasId</code>.</li><li><code>printId({ name: &quot;Bob&quot; });</code>: Object lacks <code>id</code> (error).</li></ul><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p>Think of a library system. The library has a rule: only books that have a barcode (like an <code>id</code> property) can be checked out. The interface <code>HasId</code> is like the requirement for a barcode. The librarian (the <code>printId</code> function) can only work with books that follow this rule.</p></div><h2 id="constraint-with-property-access" tabindex="-1">Constraint with Property Access <a class="header-anchor" href="#constraint-with-property-access" aria-label="Permalink to &quot;Constraint with Property Access&quot;">​</a></h2><p>This constraint ensures that a generic function can only access properties that exist on a given object. It uses the keyof operator to obtain the keys of an object&#39;s type and then constrains the key parameter to be one of those keys. This prevents accessing non-existent properties, enhancing type safety.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj[key];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: &quot;Alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// console.log(getProperty(user, &quot;address&quot;));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Error: &quot;address&quot; is not a key of user</span></span></code></pre></div><h3 id="how-it-works-2" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works-2" aria-label="Permalink to &quot;How it works&quot;">​</a></h3><ul><li><code>function getProperty&lt;T, K extends keyof T&gt;(obj: T, key: K): T[K]</code>: <ul><li>Generic function <code>getProperty</code> with types <code>T</code>, <code>K</code>.</li><li><code>K extends keyof T</code>: Ensures <code>K</code> is a key of <code>T</code>.</li><li><code>T[K]</code>: Returns the value of <code>obj[key]</code>.</li></ul></li><li><code>const user = { id: 1, name: &quot;Alice&quot;, age: 30 };</code>: Defines <code>user</code> object.</li><li><code>console.log(getProperty(user, &quot;name&quot;));</code>: &quot;name&quot; is a key of <code>user</code>.</li><li><code>console.log(getProperty(user, &quot;address&quot;));</code>: &quot;address&quot; is not a key of <code>user</code> (error).</li></ul><div class="tip custom-block"><p class="custom-block-title">Analogy</p><p>Imagine you have a filing cabinet with labeled folders. Generics are like being able to ask for any folder from the cabinet. Generic constraints are like the rule that you can only ask for folders that actually exist. If you ask for a folder labeled &quot;Customer Records,&quot; and that folder exists, you&#39;ll get it. But if you ask for a folder labeled &quot;Invisible Unicorns,&quot; which doesn&#39;t exist, you&#39;ll get an error (or nothing). The constraint prevents you from asking for folders that aren&#39;t there.</p></div>`,25)]))}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
