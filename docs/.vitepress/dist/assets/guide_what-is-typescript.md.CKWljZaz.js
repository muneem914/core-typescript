import{_ as e,c as s,o as i,ag as a}from"./chunks/framework.DPDPlp3K.js";const g=JSON.parse('{"title":"Introduction","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/what-is-typescript.md","filePath":"guide/what-is-typescript.md"}'),r={name:"guide/what-is-typescript.md"};function n(o,t,p,l,d,h){return i(),s("div",null,t[0]||(t[0]=[a(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>This documentation provides a thorough understanding of <strong>TypeScript</strong> for developers of all levels, from beginners to advanced users. The goal is to explain each concept with code examples and relatable real-life analogies to make learning intuitive and engaging. Let&#39;s discover in depth.</p><h2 id="what-is-typescript" tabindex="-1">What is TypeScript? <a class="header-anchor" href="#what-is-typescript" aria-label="Permalink to &quot;What is TypeScript?&quot;">​</a></h2><p>TypeScript is a superset of JavaScript that adds static typing and other features to enhance code quality and developer productivity. It compiles to plain <strong>JavaScript</strong>, which runs in any browser or Node.js environment.</p><h2 id="why-use-typescript" tabindex="-1">Why Use TypeScript? <a class="header-anchor" href="#why-use-typescript" aria-label="Permalink to &quot;Why Use TypeScript?&quot;">​</a></h2><ul><li><strong>Error Detection</strong>: Catches errors during development (instant-while writing on IDEs).</li><li><strong>Enhanced Tooling</strong>: Offers autocompletion, type checking, and documentation (like ours).</li><li><strong>Scalability</strong>: Ideal for large projects.</li></ul><h3 id="benefits-over-javascript" tabindex="-1">Benefits over JavaScript <a class="header-anchor" href="#benefits-over-javascript" aria-label="Permalink to &quot;Benefits over JavaScript&quot;">​</a></h3><ol><li><strong>Fewer Bugs</strong>: TypeScript catches common errors (like types or incorrect data types) during development.</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;twenty-five&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error: Type &#39;string&#39; is not assignable to type &#39;number&#39;</span></span></code></pre></div><p>Meanwhile in JavaScript:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;twenty-five&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No issues. &#39;string&#39; can be assignable to type &#39;number&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// twenty-five</span></span></code></pre></div><ol start="2"><li><strong>Better Code Readability</strong>: Explicit types make your code self-documenting and easier to understand.</li><li><strong>Improved Productivity</strong>: With features like autocompletion, inline hints, and refactoring tools, you write code faster and more confidently.</li><li><strong>Easier Collaboration</strong>: Static types make it easier for teams to work on large codebases, as everyone knows what types to expect.</li><li><strong>Modern JavaScript Features</strong>: TypeScript supports the latest JavaScript features and adds its own, like interfaces, decorators, and more.</li><li><strong>Scalability</strong>: TypeScript makes it easier to manage large and complex projects, thanks to its strong typing system and better tooling support.</li></ol><h3 id="javascript-vs-typescript" tabindex="-1">JavaScript VS TypeSCript <a class="header-anchor" href="#javascript-vs-typescript" aria-label="Permalink to &quot;JavaScript VS TypeSCript&quot;">​</a></h3><p><strong>Key Differences Between TypeScript and JavaScript</strong></p><table tabindex="0"><thead><tr><th><strong>Feature</strong></th><th><strong>JavaScript</strong></th><th><strong>TypeScript</strong></th></tr></thead><tbody><tr><td><strong>Typing</strong></td><td>Dynamic typing (types checked at runtime)</td><td>Static typing (types checked at compile time)</td></tr><tr><td><strong>Error Checking</strong></td><td>Errors only show up during execution</td><td>Errors caught during development</td></tr><tr><td><strong>IDE Support</strong></td><td>Basic code suggestions</td><td>Advanced autocompletion, inline documentation, and type inference</td></tr><tr><td><strong>Compilation</strong></td><td>Directly runs in browsers</td><td>Needs to be compiled into JavaScript using the TypeScript compiler (<code>tsc</code>)</td></tr><tr><td><strong>New Features</strong></td><td>Limited to what browsers support</td><td>Supports future JavaScript features + TypeScript-only features</td></tr><tr><td><strong>Interfaces &amp; Types</strong></td><td>Not supported natively</td><td>Fully supports interfaces, custom types, and more</td></tr><tr><td><strong>Learning Curve</strong></td><td>Easier for beginners</td><td>Slightly steeper learning curve, but more predictable code</td></tr></tbody></table>`,15)]))}const k=e(r,[["render",n]]);export{g as __pageData,k as default};
